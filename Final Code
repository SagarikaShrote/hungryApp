#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct menu_type{
	char item[20];			//name of items
	int price;
	struct menu_type * next;
} menu;

typedef struct prevorder_type{
	menu * Olist;
	char rname[20];				//name of restaurant from where the order was placed
	struct prevorder_type * next;
} prevorder;

typedef struct rest_type{
	char rname[20];
	char radd[20];
	char ctype[10];			//cuisine type
	char rtype[10];			//category of restaurant (pub, cafe etc)
	int seats;
	int pincode;
	struct rest_type* area;
	struct rest_type* cuisine;
	struct rest_type* type;
	struct rest_type* next;
					//special facilities
	menu * mptr;
} rest;

typedef struct agent_type{
	//int id;
	int pno;
	char name[20];
	char aadd[20];			//area for agent
	int free;			//to check if he is free or not? 0 means free while 1 means he is already assigned to some order
	int comm;
	int coust_phno;
	struct agent_type * next;			//current accumulated commision
} agent;

typedef struct user_type{
	//int uid;		
	int pno;
	char name[20];
	char add[20];
	char favitem[20];
	int pincode;
	prevorder * list;
	menu* mptr;
	struct user_type * next;
} user;

typedef struct order_type{
	int oid;
	user * cust;
	char rname[20];
	menu * order;
	agent * dboy;
	int sum;		//total money to be paid  //this would be done by adding up money while ordering or selecting the menu
	struct order_type * next;
} orderlist;
rest* Name[100];
rest* Area[100];
rest* Cuisine[100];
rest* Type[100];
user* ulist;
orderlist* olist;
agent *Agent;
menu * MakeNode_Menu(char name[],int price){
        menu* temp=(menu*)malloc(sizeof(menu));
            temp->next=NULL;
            strcpy(temp->item,name);
            temp->price=price;
            return temp;
}

void favitem(user * ptr){
		prevorder * pptr=ptr->list;
		menu * mptr=ptr->list->Olist,*tmptr;
		char i[20];
		strcpy(i,mptr->item);
		int freq=0,nfreq=0;
			while(pptr!=NULL){
				mptr=pptr->Olist;
				while(mptr!=NULL){
					tmptr=mptr->next;
					while(tmptr!=NULL){
						if(strcmp(mptr->item,tmptr->item)==0){
							nfreq+=1;
						}
						else{
							tmptr=tmptr->next;
						}
					}
					if(nfreq>freq){
						freq=nfreq;
						strcpy(i,mptr->item);
					}
					mptr=mptr->next;
				}
				pptr=pptr->next;
			}
		strcpy(ptr->favitem,i);
}
void agent_init()
{
	agent* a,*t;
	a = NULL;
	//int i=1001;
	int p=1236457;

	t=(agent*)malloc(sizeof(agent));
	t->next=a;
	a=t;
	t->pno=p++;
	strcpy(t->name,"ashish");
	strcpy(t->aadd,"delhi");
	t->free=0;
	t->comm=50;

	t=(agent*)malloc(sizeof(agent));
	t->next=a;
	a=t;
	t->pno=p++;
	strcpy(t->name,"rahul");
	strcpy(t->aadd,"bhopal");
	t->free=0;
	t->comm=70;


	t=(agent*)malloc(sizeof(agent));
	t->next=a;

	a=t;
	t->pno=p++;
	strcpy(t->name,"santosh");
	strcpy(t->aadd,"nagpur");
	t->free=0;
	t->comm=80;
	Agent = a;
}

menu * addMenu(menu * ptr,int s){       //s is the no. of items to be added
        int i=0,price;
        char name[20];
        while(i<s){
                i++;
                printf("enter name of dish");
                scanf("%s",name);
                printf("input price\n");
                scanf("%d",&price);
                menu* temp=MakeNode_Menu(name,price);
                if(ptr==NULL){
                        ptr=temp;
                }
                else{
                        temp->next=ptr;
                        ptr=temp;
                }
        }
        return ptr;
}
void printMenu(rest * r){
	menu * m=NULL;
	m=r->mptr;
	int i=0;
	printf("our menu is \n");
	while(m!=NULL){
		printf("%d.",i);
		printf("%s - %d\n",m->item,m->price);
		m=m->next;
		i++;
	}
}
user * user_search(int num){
	int flag=0,p;
	//printf("give user phone no.\n");
	//scanf("%d",&p);
	user * ptr=ulist;							//ulist is the assumed global user list
	while(ptr!=NULL && flag==0){
		if(ptr->pno==num){
			flag=1;
		}
		else
			ptr=ptr->next;
	}
	return ptr;
}

user * user_MakeNode()
{
	user* temp=(user *)malloc(sizeof(user));
	temp->next=NULL;
	//printf("give user id\n");
	//scanf("%d",&temp->uid);f
	printf("give user name\n");
	scanf("%s",temp->name);
	printf("give user phone no\n");
	scanf("%d",&temp->pno);
	printf("give user address\n");
	scanf("%s",temp->add);
	printf("give user pincode\n");
	scanf("%d",&temp->pincode);
	return temp;
}
menu* add_item(menu* Menu)
{
	menu* mptr = MakeNode_Menu(Menu->item,Menu->price);
	return mptr;
}
void add_order(user* nptr,rest* lptr)
{
	int i;
	menu* Menu = lptr->mptr;
	printMenu(lptr);
	printf("Enter digit before the food item you want to add\n");
	scanf("%d",&i);
	while(i!=0 && Menu!=NULL)
	{
		if(Menu!=NULL)
		{
			Menu = Menu->next;
			i--;
		}
	}
	orderlist* optr = (orderlist*)malloc(sizeof(orderlist));
	optr->cust = nptr;
	strcpy(optr->rname,lptr->rname);
	optr->oid = nptr->pno;
	optr->dboy = Agent;
	Agent = Agent->next;
	optr->dboy->coust_phno = nptr->pno;
	optr->order = add_item(Menu);
	if(nptr->mptr==NULL)
		nptr->mptr = add_item(Menu);
	else
	{
		(nptr->mptr)->next = add_item(Menu);
	}
	if(olist==NULL)
	{
		olist = optr;
	}
	else
	{
		olist->next = optr;
	}
}
void order(rest* lptr)
{
	int num;
	printf("Enter your Number\n");
	scanf("%d",&num);
	user* nptr = user_search(num);
	if(nptr== NULL)
	{
		printf("Your data is not found please register first\n");
		nptr  =  user_MakeNode();
	}
	add_order(nptr,lptr);
}
rest* MakeNode_rest()
{
	int i;
	rest* lptr = (rest*) malloc (sizeof(rest));
	printf("Enter Name of restaurant ");
	scanf("%s",lptr->rname);
	printf("Enter Address of restaurant ");
	scanf("%s",lptr->radd);
	printf("Enter Cuisine of restaurant ");
	scanf("%s",lptr->ctype);
	printf("Enter type of restaurant ");
	scanf("%s",lptr->rtype);
	printf("Enter Number of seats of restaurant ");
	scanf("%d",&lptr->seats);
	printf("Enter pincode of restaurant ");
	scanf("%d",&lptr->pincode);
	lptr->area = NULL;
	lptr->cuisine = NULL;
	lptr->type = NULL;
	printf("enter number of menu items to be added");
	scanf("%d",&i);
	lptr->mptr = addMenu(lptr->mptr,i);
	FILE *f=fopen("/home/sanket/Desktop/dspd/data.txt","a");
	fprintf(f,"%s %s %s %s %d %d",lptr->rname,lptr->radd,lptr->ctype,lptr->rtype,lptr->seats,lptr->pincode);
	fclose(f);
	return lptr;
}
int Hash_name(char s[])
{
	int index=0,i=0;
	while(s[i]!='\0')
	{
		index = index + (s[i]-'a');
		index = index%10;
		i++;
	}
	return index;
}
int Hash_area(int pincode)
{
	int index;
	index = (pincode)%100;
	index = index;
	return (index-1);
}
int Hash_cuisine(char s[])
{
	int index;
	if(strcmp(s,"south")==0)
	{
		index = 0;
	}
	else if(strcmp(s,"north")==0)
	{
		index = 1;
	}
	else if(strcmp(s,"chinese")==0)
	{
		index = 2;
	}
	else
	{
		index = -1;
	}
	return index;
}
int Hash_type(char s[])
{
	int index;
	if(strcmp(s,"pub")==0)
	{
		index = 0;
	}
	else if(strcmp(s,"cafe")==0)
	{
		index = 1;
	}
	else if(strcmp(s,"restaurant")==0)
	{
		index = 2;
	}
	else
	{
		index = -1;
	}
	return index;
}
void Add_name(rest*lptr)
{
	int i;
	if(lptr!=NULL)
	{
		i = Hash_name(lptr->rname);
		rest*nptr = Name[i];
		lptr->next = nptr;
		Name[i] = lptr;
	}
}
void Add_area(rest* lptr)
{
	int i;
	if(lptr!=NULL)
	{
		i = Hash_area(lptr->pincode);
		rest*nptr = Area[i];
		lptr->area = nptr;
		Area[i] = lptr;
	}
}
void Add_cuisine(rest* lptr)
{
	int i;
	if(lptr!=NULL)
	{
		i = Hash_cuisine(lptr->ctype);
		rest*nptr = Cuisine[i];
		lptr->cuisine = nptr;
		Cuisine[i] = lptr;
	}
}
void Add_type(rest* lptr)
{
	int i;
	if(lptr!=NULL)
	{
		i = Hash_type(lptr->rtype);
		rest*nptr = Type[i];
		lptr->type = nptr;
		Type[i] = lptr;
	}
}
void Add()
{
	rest* lptr,*nptr;
	int i;
	lptr = (rest*) malloc (sizeof(rest));
	lptr = MakeNode_rest();
	if(lptr!=NULL)
	{
		Add_name(lptr);
		Add_area(lptr);
		Add_cuisine(lptr);
		Add_type(lptr);
	}
}
void search_name()
{
	rest* lptr;
	char s[10];
	int f=0,i;
	printf("Enter the name of Restaurant");
	scanf("%s",s);
	int index = Hash_name(s);
	lptr = Name[index];
	while(lptr!=NULL && f==0)
	{
		if(strcmp(s,lptr->rname)==0)
		{
			printf("Restaurant found\n");
			printf("%s\n",lptr->rname);
			printf("%d\n",lptr->pincode);
			printf("MENU:\n");
			printMenu(lptr);
			f = 1;
		}
		else
		{
			lptr = lptr->next;
		}
	}
	if(f==0)
	{
		printf("Restaurant is not present in our list sorry\n");
	}
	if(lptr!=NULL)
	{
		printf("To order press 1 else 0");
		scanf("%d",&i);
		if(i==1)
		{
			order(lptr);
		}
	}
}
void search_address()
{
	rest* lptr;
	int pincode,index;
	printf("Enter the pincode of area");
	scanf("%d",&pincode);
	index = Hash_area(pincode);
	lptr = Area[index];
	if(lptr!=NULL)
	{
		while(lptr!=NULL)
		{
			if(lptr->pincode==pincode)
			{
				printf("Restaurant found\n");
				printf("%s\n",lptr->rname);
				printf("%d\n",lptr->pincode);
				printf("MENU:\n");
				printMenu(lptr);
			}
			lptr = lptr->next;
		}
	}
	else
	{
		printf("Sorry!! We do not serve in your area\n");
	}
}
void search_cuisine()
{
	rest* lptr;
	int f=0,index;
	char s[10];
	printf("Enter the cuisine of Restaurant");
	scanf("%s",s);
	index = Hash_cuisine(s);
	lptr = Cuisine[index];
	while(lptr!=NULL)
	{
		if(strcmp(lptr->ctype,s)==0)
		{
			printf("Restaurant found\n");
			printf("%s\n",lptr->rname);
			printf("%d\n",lptr->pincode);
			printf("MENU:\n");
			printMenu(lptr);
			f = 1;
		}
		lptr = lptr->next;
	}
	if(f==0)
	{
		printf("Restaurant is not present in our list sorry\n");
	}
}void search_type()
{
	rest* lptr;
	int f=0,index;
	char s[10];
	printf("Enter the type of Restaurant");
	scanf("%s",s);
	index = Hash_type(s);
	lptr = Type[index];
	while(lptr!=NULL)
	{
		if(strcmp(lptr->rtype,s)==0)
		{
			printf("Restaurant found\n");
			printf("%s\n",lptr->rname);
			printf("%d\n",lptr->pincode);
			printf("MENU:\n");
			printMenu(lptr);
			f = 1;
		}
		lptr = lptr->next;
	}
	if(f==0)
	{
		printf("Restaurant is not present in our list sorry\n");
	}
}
void search()
{
	int i;
	printf("Enter your choice of search\n");
	printf("1. Search By Name\n");
	printf("2. Search By Address\n");
	printf("3. Search By Cuisine\n");
	printf("4. Search By Type\n");
	scanf("%d",&i);
	switch(i)
	{
		case 1: search_name();
		break;
		case 2: search_address();
		break;
		case 3: search_cuisine();
		break;
		case 4: search_type();
		break;
		default: break;
	}
}
void initiliase()
{
	int i;
	for(i=0;i<100;i++)
	{
		Name[i] = NULL;
		Area[i] = NULL;
		Cuisine[i] = NULL;
		Type[i] = NULL;
	}
	olist = NULL;
	ulist = NULL;
	Agent = NULL;
}
void place_order()
{
	search_name();	
}
void delivered(){
	printf("Enter your phone number");
	int id,flag=0,ph;
	scanf("%d",&ph);
	orderlist * ptr=olist,*prev=NULL;				//olist is the assumed starting pointer of the universal order list
	while(ptr!=NULL && flag==0){
		
		if(ptr->oid==ph ){
			flag=1;
			ptr->dboy->comm+=(ptr->sum/10);		//for 10% commision being added to the agent
			if(prev==NULL){
				olist=ptr->next;
				
				
			}
			else{
				prev->next=ptr->next;
				
			}

//yaha se
			(ptr->cust)->list=(prevorder *) malloc (sizeof(prevorder));
			(ptr->cust)->list->next=NULL;
			(ptr->cust)->list->Olist=(menu*)malloc(sizeof(menu));
			(ptr->cust)->list->Olist->next=NULL;				
			(ptr->order)->next=((ptr->cust)->list)->Olist->next;		//adding order in users preordered list
			ptr->cust->list->Olist=ptr->order;
			strcpy(ptr->cust->list->rname,ptr->rname);
			favitem(ptr->cust);
			printf("fav item is:%s \n",ptr->cust->favitem);
//yaha tk

			ptr->dboy->next = Agent;
			Agent = ptr->dboy; 
			free(ptr);
		}
		else
			prev=ptr;
			ptr=ptr->next;
	}
	if(flag == 1)
		printf("done\n");
	else
		printf("No current order on your ACCOUNT");
}

void data_rest(){
	FILE * f=fopen("/home/sanket/Desktop/dspd/data.txt","r");
	rest *r;
	menu*m=NULL,*t;
	char name[20],add[20],ctype[20],rtype[20],in[20];
	int seat,pin,price;
	while(!feof(f)){
		fscanf(f,"%s%s%s%s%d%d%s%d",name,add,ctype,rtype,&seat,&pin,in,&price);		//in order name address ctype rtype seat pincode itemname price itemname price
		r=(rest *) malloc (sizeof(rest));
		r->next=NULL;
		//rr=r;
		strcpy(r->rname,name);
		strcpy(r->radd,add);
		strcpy(r->ctype,ctype);
		strcpy(r->rtype,rtype);
		r->seats=seat;
		r->pincode=pin;
		r->area=NULL;
		r->cuisine=NULL;
		r->type=NULL;
		r->mptr=(menu*)malloc(sizeof(menu));
		strcpy(r->mptr->item,in);
		r->mptr->price=price;
		r->mptr->next=NULL;
		Add_name(r);
		Add_area(r);
		Add_cuisine(r);
		Add_type(r);
	}
	fclose(f);
}
void data_agent(){
	FILE * f=fopen("/home/sanket/Desktop/dspd/dataA.txt","r");
	agent *a=NULL,*t;
	int free=0,c=0;
	int p;
	char name[20],add[20];
	while(!feof(f)){
		fscanf(f,"%s %s %d",name,add,&p);		// taking only id,name,address and phone no. as at the start of day commision is zero and so is the work, all are free
		t=(agent*)malloc(sizeof(agent));
		t->next=a;
		a=t;
		t->pno=p;
		strcpy(t->name,name);
		strcpy(t->aadd,add);
		t->free=free;
		t->comm=c;
	}
	fclose(f);
	Agent=a;
}

void cancel(){
	printf("input your phone number\n");
	int id,flag=0,ph;
	scanf("%d",&ph);
	orderlist * ptr=olist,*prev=NULL;				//olist is the assumed starting pointer of the universal order list
	while(ptr!=NULL && flag==0){
		if(ptr->oid==ph ){
			flag=1;
			if(prev==NULL){
				olist=ptr->next;
			}
			else{
				prev->next=ptr->next;
				
			}
			ptr->dboy->next = Agent;
			Agent = ptr->dboy; 
			free(ptr);							//only successfully served orders are added to the previous order list of the user
		}
		else
			prev=ptr;
			ptr=ptr->next;
	}
	if(flag == 1)
		printf("cancelled\n");
	else
		printf("NO order to delete\n");
}
void details()
{
	int num,f=0;
	printf("Enter your mobile number");
	scanf("%d",&num);
	orderlist* optr;
	optr = olist;
	while(optr!=NULL)
	{
		if(optr->dboy->coust_phno = num);
		{
			printf("agent details\n");
			printf("phone number %d\n",optr->dboy->pno);
			printf("Name: %s",optr->dboy->name);
			f = 1;
		}
		optr=optr->next;
	}
	if(f==0)
	{
		printf("You have no order ongoing ");
	}
}
void agent_details()
{
	agent* aptr;
	aptr = Agent;
	while(aptr!=NULL)
	{
		printf("%s\n",aptr->name);
		printf("%d\n",aptr->pno);
		aptr = aptr->next;
	}
}
void All_orders()
{
	orderlist* optr;
	optr = olist;
	if(optr==NULL)
	{
		printf("No orders to show\n");
	}
	while(optr!=NULL)
	{
		printf("order id is : %d\n",optr->oid);
		menu * m=NULL;
		m=optr->order;
		int i=0;
		printf("your order \n");
		while(m!=NULL){
		printf("%d .",i);
		printf("%s - %d\n",m->item,m->price);
		m=m->next;
		i++;
		}
		optr = optr->next;
	}
}
int main()
{	
	initiliase();
	agent_init();
	data_rest();
	data_agent();
	int i,flag=1;
	printf("WELCOME TO THE APP\n");
	while(flag==1)
	{
		printf("\n0.To close the app\n");
		printf("1.Search Restaurant\n");
		printf("2.Add Restaurant\n");
		printf("3.Order from Restaurant\n");
		printf("4.TO check details of your order\n");
		printf("5.TO confirm delivery of order\n");
		printf("6.To cancle the order\n");
		printf("7.Agent details\n");
		printf("8.All orders\n");
		scanf("%d",&i);
		switch(i)
		{
			case 0: flag=0;
			break;
			case 1: search();
			break;
			case 2: Add();
			break;
			case 3: place_order();
			break;
			case 4: details();
			break;
			case 5: delivered();
			break;
			case 6: cancel();
			break;
			case 7: agent_details();
			break;
			case 8: All_orders();
			break;
			default: break;
		}
	}
	return 0;
}
